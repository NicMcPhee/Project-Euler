(ns project-euler.core)

(defn problem-1 [upper-limit]
  "If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
  The sum of these multiples is 23.
  Find the sum of all the multiples of 3 or 5 below 1000."
  (apply + (filter #(or (= 0 (mod % 3)) (= 0 (mod % 5)))
                 (range 3 upper-limit)))
  )

(problem-1 1000)

;;;;;;;;;;;;;;

(defn fib-seq []
  ((fn rfib [a b]
       (cons a (lazy-seq (rfib b (+ a b)))))
    0 1))

(defn problem-2 [upper-limit]
  "Each new term in the Fibonacci sequence is generated by adding the previous two terms.
  By starting with 1 and 2, the first 10 terms will be:
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
  By considering the terms in the Fibonacci sequence whose values do not exceed four million,
  find the sum of the even-valued terms."
  (apply + (filter even? (take-while #(< % upper-limit) (fib-seq))))
  )

(problem-2 4000000)

;;;;;;;;;;;;;;

; Based on http://stackoverflow.com/a/7625207

(defn gen-primes "Generates an infinite, lazy sequence of prime numbers"
  []
  (let [reinsert (fn [table x prime]
                   (update-in table [(+ prime x)] conj prime))]
    (defn primes-step [table d]
      (if-let [factors (get table d)]
        (recur (reduce #(reinsert %1 d %2) (dissoc table d) factors)
               (inc d))
        (lazy-seq (cons d (primes-step (assoc table (* d d) (list d))
                                       (inc d))))))
    (primes-step {} 2)))

(defn factors [n]
  (loop [n n primes (gen-primes) fs #{}]
    (let [[p & ps] primes]
      (cond
       (= n 1) fs
       (= 0 (mod n p)) (recur (/ n p) primes (conj fs p))
       :else (recur n ps fs))
      )
    )
  )

(defn problem-3 [number-to-factor]
  "The prime factors of 13195 are 5, 7, 13 and 29.
   What is the largest prime factor of the number 600851475143 ?"
  (apply max (factors number-to-factor))
  )

(problem-3 600851475143)

;;;;;;;;;;;;;;;;

(defn palindromic? [n]
  (let [ns (str n)]
    (= ns (clojure.string/reverse ns))))

(defn problem-4 [start end]
  "A palindromic number reads the same both ways. The largest palindrome
  made from the product of two 2-digit numbers is 9009 = 91 × 99.

  Find the largest palindrome made from the product of two 3-digit numbers."
  (apply max
         (for [x (range start end)
               y (range x end)
               :when (palindromic? (* x y))]
           (* x y))
         ))

(problem-4 100 1000)

;;;;;;;;;;;;;;;;

(defn gcd [a b]
  (if (= b 0)
    a
    (gcd b (mod a b))))

(defn lcd [a b]
  (/ (* a b) (gcd a b)))

(defn problem-5 [upper-limit]
  "2520 is the smallest number that can be divided by each of the numbers
  from 1 to 10 without any remainder.

  What is the smallest positive number that is evenly divisible by all
  of the numbers from 1 to 20?"
  (reduce lcd (range 1 (inc upper-limit)))
  )

(problem-5 20)

;;;;;;;;;;;;;;;;

(defn problem-6 [upper-limit]
  (let [values (range (inc upper-limit))
        sum (reduce + values)
        sqrs (map #(* % %) values)
        sum-of-sqrs (reduce + sqrs)]
    (- (* sum sum) sum-of-sqrs)))

(problem-6 100)

;;;;;;;;;;;;;;;;

(defn problem-7 [which-prime]
  (nth (gen-primes) (dec which-prime)))

(problem-7 10001)

;;;;;;;;;;;;;;;;

(def problem-8-digits
  "The four adjacent digits in the 1000-digit number that
  have the greatest product are 9 × 9 × 8 × 9 = 5832.

  73167176531330624919225119674426574742355349194934
  96983520312774506326239578318016984801869478851843
  85861560789112949495459501737958331952853208805511
  12540698747158523863050715693290963295227443043557
  66896648950445244523161731856403098711121722383113
  62229893423380308135336276614282806444486645238749
  30358907296290491560440772390713810515859307960866
  70172427121883998797908792274921901699720888093776
  65727333001053367881220235421809751254540594752243
  52584907711670556013604839586446706324415722155397
  53697817977846174064955149290862569321978468622482
  83972241375657056057490261407972968652414535100474
  82166370484403199890008895243450658541227588666881
  16427171479924442928230863465674813919123162824586
  17866458359124566529476545682848912883142607690042
  24219022671055626321111109370544217506941658960408
  07198403850962455444362981230987879927244284909188
  84580156166097919133875499200524063689912560717606
  05886116467109405077541002256983155200055935729725
  71636269561882670428252483600823257530420752963450

  Find the thirteen adjacent digits in the 1000-digit number
  that have the greatest product. What is the value of this product?"
  (let [nums ["73167176531330624919225119674426574742355349194934"
              "96983520312774506326239578318016984801869478851843"
              "85861560789112949495459501737958331952853208805511"
              "12540698747158523863050715693290963295227443043557"
              "66896648950445244523161731856403098711121722383113"
              "62229893423380308135336276614282806444486645238749"
              "30358907296290491560440772390713810515859307960866"
              "70172427121883998797908792274921901699720888093776"
              "65727333001053367881220235421809751254540594752243"
              "52584907711670556013604839586446706324415722155397"
              "53697817977846174064955149290862569321978468622482"
              "83972241375657056057490261407972968652414535100474"
              "82166370484403199890008895243450658541227588666881"
              "16427171479924442928230863465674813919123162824586"
              "17866458359124566529476545682848912883142607690042"
              "24219022671055626321111109370544217506941658960408"
              "07198403850962455444362981230987879927244284909188"
              "84580156166097919133875499200524063689912560717606"
              "05886116467109405077541002256983155200055935729725"
              "71636269561882670428252483600823257530420752963450"]]
    (map #(- (int %) (int \0))
         (apply concat nums))))

(defn problem-8 [num-adjacent]
  (let [groups (partition num-adjacent 1 problem-8-digits)
        products (map #(apply * %) groups)]
    (apply max products)))

(problem-8 13)

;;;;;;;;;;;;;;;;

(defn problem-9 [total]
  "A Pythagorean triplet is a set of three natural numbers,
  a < b < c, for which,

     a^2 + b^2 = c^2

  For example, 32 + 42 = 9 + 16 = 25 = 52.

  There exists exactly one Pythagorean triplet for which a + b + c = 1000.

  Find the product abc."
  (let
    [triples (for [a (range 1 total)
                   b (range a (- total a))
                   :let [c (- total (+ a b))]
                   :when (= (+ (* a a) (* b b)) (* c c))]
               [a b c])]
    (map #(apply * %) triples)))

(problem-9 1000)

;;;;;;;;;;;;;;;;


(defn problem-10 [upper-bound]
  "The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.

   Find the sum of all the primes below two million."
  (apply + (take-while #(< % upper-bound) (gen-primes))))

(problem-10 2000000)
